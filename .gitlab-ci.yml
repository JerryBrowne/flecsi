#------------------------------------------------------------------------------#
# FleCSI Gitlab CI: Main
#------------------------------------------------------------------------------#

stages:
  - Canary
  - MPI backend
  - Legion backend
  - Standalone
  - Final

default:
  interruptible: true
  tags:
    - darwin-slurm-shared
  before_script:
   - echo "Running on $(hostname)"

# project-wide warning configuration
# these are also parsed by tools, so don't try to use variable expansion here
.gcc_flags: &gcc_flags
  c_flags: -Wall -Wundef -W -Werror -Wvla
  cxx_flags: -Wextra-semi -Wno-parentheses

.llvm_flags: &llvm_flags
  c_flags: -fcolor-diagnostics -Wno-unknown-cuda-version -Wall -Wundef -W -Werror -Wvla
  cxx_flags: -Wextra-semi -Wno-parentheses -Wno-braced-scalar-init

variables:
  USE_SPACK_UPSTREAM: develop-82d41a7be
  COLOR_BLUE: '\033[1;34m'
  COLOR_GREEN: '\033[0;32m'
  COLOR_MAGENTA: '\033[1;35m'
  COLOR_CYAN: '\033[1;36m'
  COLOR_PLAIN: '\033[0m'
  # global defaults
  GCC_VERSION: 11.1.0
  CLANG_VERSION: 13.0.1
  ROCM_VERSION: 5.4.3
  CUDA_VERSION: 11.8.0
  CUDA_ARCH: 70
  PARTITIONS: general,skylake-gold,skylake-platinum
  IB_EDR_CONSTRAINT: "--constraint=ib:edr"
  V100_CONSTRAINT: "--constraint=\"cpu_family:haswell&(gpu1_model:Tesla_V100S-PCIE-32GB|gpu1_model:Tesla_V100-PCIE-32GB)\""
  JOB_CONSTRAINTS: "${IB_EDR_CONSTRAINT}"
  SCHEDULER_PARAMETERS: "-N1 --qos=debug -p ${PARTITIONS} ${JOB_CONSTRAINTS}"
  LEGION_IBV: legion conduit=ibv
  LEGION_MPI: legion conduit=mpi
  LEGION_IBV_CUDA: "${LEGION_IBV} +cuda +cuda_unsupported_compiler"
  LEGION_MPI_CUDA: "${LEGION_MPI} +cuda +cuda_unsupported_compiler"
  LEGION_IBV_ROCM: "legion%rocmcc@${ROCM_VERSION} conduit=ibv"
  LEGION_MPI_ROCM: "legion%rocmcc@${ROCM_VERSION} conduit=mpi"
  KOKKOS_SERIAL: kokkos ~cuda
  KOKKOS_CUDA: kokkos%clang@${CLANG_VERSION} +cuda +hwloc ~wrapper
  ENABLE_UNIT_TESTS: "ON"
  VERSION: "flecsi@${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  ENVIRONMENT: "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"

#------------------------------------------------------------------------------#
# Common build variants
#------------------------------------------------------------------------------#
.mpich-legion-kokkos-debug: &mpich-legion-kokkos-debug
  VARIANTS: "backend=legion build_type=Debug caliper_detail=low +graphviz +hdf5 +kokkos ^${LEGION_IBV} build_type=Debug +kokkos ^${KOKKOS_SERIAL} ^mpich"

.openmpi-mpi-debug: &openmpi-mpi-debug
  VARIANTS: "backend=mpi build_type=Debug +hdf5 ^openmpi"

include: .gitlab/templates.yml

#------------------------------------------------------------------------------#
# Formatting target.
#
# The selected image must have the required clang-format version
# installed during image creation in the 'gitlab-ci' branch.
#------------------------------------------------------------------------------#

docs_and_format:check:
  extends: .check_docs_and_format_template
  needs:
    - job: docs_and_format
      artifacts: true
    - job: mpich-tutorial:legion
    - job: mpich-flaxpy:legion
    - job: mpich-poisson:legion
  only:
    - merge_requests
  variables:
    JOB_CONSTRAINTS: ""

#------------------------------------------------------------------------------#
# Build and unit tests for default settings.
#------------------------------------------------------------------------------#

mpich-defaults:
  stage: Legion backend
  extends: .darwin_defaults_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=legion ^${LEGION_IBV} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-legion-gnu:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-legion-kokkos-debug
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    PARTITIONS: skylake-gold
    ARCHIVE_SPACK_ENV: "yes"

mpich-legion-gnu:release:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=legion +hdf5 +kokkos ^${LEGION_IBV} +kokkos ^${KOKKOS_SERIAL} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-mpi-gnu:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=mpi build_type=Debug caliper_detail=low +graphviz +hdf5 +kokkos ^${KOKKOS_SERIAL} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

mpich-mpi-gnu:release:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=mpi +hdf5 +kokkos ^${KOKKOS_SERIAL} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Tutorial tests for Legion backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-tutorial:legion:
  extends: .darwin_standalone_template
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    <<: *gcc_flags
    LABEL: tutorial
    STDIR: tutorial
    BUILD_TYPE: Debug
    PARTITIONS: skylake-gold

mpich-flaxpy:legion:
  extends: .darwin_standalone_template
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    <<: *gcc_flags
    LABEL: standalone
    STDIR: tutorial/standalone/flaxpy
    BUILD_TYPE: Debug
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"

mpich-poisson:legion:
  extends: .darwin_standalone_template
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    <<: *gcc_flags
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-gnu:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=legion build_type=Debug +hdf5 ^${LEGION_IBV} build_type=Debug ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

openmpi-legion-gnu:release:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=legion +hdf5 ^${LEGION_IBV} ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and Clang + CUDA compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-clang-cuda:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=legion build_type=Debug +hdf5 +kokkos +cuda cuda_arch=${CUDA_ARCH} ^${LEGION_IBV_CUDA} build_type=Debug ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION} ^openmpi"
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    PARTITIONS: volta-x86
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"
    ARCHIVE_SPACK_ENV: "yes"

openmpi-legion-clang-cuda-mpi:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=legion build_type=Debug +hdf5 +kokkos +cuda cuda_arch=${CUDA_ARCH} ^${LEGION_MPI_CUDA} build_type=Debug ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION} ^openmpi"
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    PARTITIONS: volta-x86,power9-rhel7
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and GNU compiler toolchain. Intentionally does NOT use Kokkos to also test
# that kind of build.
#------------------------------------------------------------------------------#

openmpi-mpi-gnu:
  stage: MPI backend
  extends: .darwin_build_template
  dependencies: []
  needs: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-mpi-debug
    TOOLCHAIN: "gcc@${GCC_VERSION}"

openmpi-mpi-gnu:release:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=mpi +hdf5 ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"


#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with MPICH provider,
# and Clang compiler toolchain.
#------------------------------------------------------------------------------#

mpich-legion-clang:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-legion-kokkos-debug
    TOOLCHAIN: "clang@${CLANG_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with MPICH provider,
# and Clang compiler toolchain. Intentionally does NOT use Kokkos to also test
# that kind of build.
#------------------------------------------------------------------------------#

mpich-mpi-clang:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=mpi build_type=Debug caliper_detail=low +graphviz +hdf5 ^mpich"
    TOOLCHAIN: "clang@${CLANG_VERSION}"

#------------------------------------------------------------------------------#
# Documentation
#------------------------------------------------------------------------------#
docs_and_format:
  stage: Canary
  extends: .darwin_docs_and_format_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    FORMAT_VERSION: 13.0.1
    JOB_CONSTRAINTS: ""
  allow_failure: true

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and Clang compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-mpi-clang:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-mpi-debug
    TOOLCHAIN: "clang@${CLANG_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and ROCM compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-mpi-rocm:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    AMDGPU_TARGET: gfx908
    VARIANTS: "backend=mpi build_type=Debug +hdf5 +kokkos +rocm amdgpu_target=${AMDGPU_TARGET} ^kokkos+hwloc ^boost%rocmcc@${ROCM_VERSION} ^hip@${ROCM_VERSION} ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    PARTITIONS: shared-gpu-amd-mi100
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"
    ARCHIVE_SPACK_ENV: "yes"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and ROCM compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-rocm:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    AMDGPU_TARGET: gfx90a
    VARIANTS: "backend=legion build_type=Debug +hdf5 +kokkos +rocm amdgpu_target=${AMDGPU_TARGET} ^${LEGION_MPI_ROCM} ^kokkos+hwloc ^boost%rocmcc@${ROCM_VERSION} ^hip@${ROCM_VERSION} ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    PARTITIONS: shared-gpu-amd-mi250
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"
    ARCHIVE_SPACK_ENV: "yes"

#------------------------------------------------------------------------------#
# GPU standalone tests
#------------------------------------------------------------------------------#

openmpi-poisson-cuda-clang:legion:
  extends: .darwin_standalone_template
  needs:
    ["openmpi-legion-clang-cuda"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: volta-x86
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"

openmpi-poisson-rocm:mpi:
  extends: .darwin_standalone_template
  needs:
    ["openmpi-mpi-rocm"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: shared-gpu-amd-mi100
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"

openmpi-poisson-rocm:legion:
  extends: .darwin_standalone_template
  needs:
    ["openmpi-legion-rocm"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: shared-gpu-amd-mi250
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"
