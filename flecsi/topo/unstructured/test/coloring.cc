// Copyright (c) 2016, Triad National Security, LLC
// All rights reserved.

#include "simple_definition.hh"

#include "flecsi/execution.hh"
#include "flecsi/flog.hh"
#include "flecsi/topo/unstructured/coloring_utils.hh"
#include "flecsi/topo/unstructured/interface.hh"
#include "flecsi/util/parmetis.hh"
#include "flecsi/util/unit.hh"

using namespace flecsi;

int
naive_coloring() {
  UNIT("TASK") {
    topo::unstructured_impl::simple_definition sd("simple2d-16x16.msh");
    ASSERT_EQ(sd.dimension(), 2lu);
    ASSERT_EQ(sd.num_entities(0), 289lu);
    ASSERT_EQ(sd.num_entities(2), 256lu);

    auto [naive, e2v, v2e, e2e] = topo::unstructured_impl::make_dcrs(sd, 1);

    std::vector<size_t> distribution = {52, 103, 154, 205, 256};
    ASSERT_EQ(naive.distribution.ends(), distribution);

    // clang-format off
    switch(process()) {
      case 0: {
        std::vector<size_t> offsets = {
          0, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 46, 49,
          53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 108, 111,
          115, 119, 123, 127, 131, 135, 139, 143, 147, 151, 155, 159, 163, 167,
          170, 173, 177, 181, 185
        };
        std::vector<size_t> indices = {
          1, 16, 0, 2, 17, 1, 3, 18, 2, 4, 19, 3, 5, 20, 4, 6, 21, 5, 7, 22, 6,
          8, 23, 7, 9, 24, 8, 10, 25, 9, 11, 26, 10, 12, 27, 11, 13, 28, 12,
          14, 29, 13, 15, 30, 14, 31, 0, 17, 32, 1, 16, 18, 33, 2, 17, 19, 34,
          3, 18, 20, 35, 4, 19, 21, 36, 5, 20, 22, 37, 6, 21, 23, 38, 7, 22,
          24, 39, 8, 23, 25, 40, 9, 24, 26, 41, 10, 25, 27, 42, 11, 26, 28, 43,
          12, 27, 29, 44, 13, 28, 30, 45, 14, 29, 31, 46, 15, 30, 47, 16, 33,
          48, 17, 32, 34, 49, 18, 33, 35, 50, 19, 34, 36, 51, 20, 35, 37, 52,
          21, 36, 38, 53, 22, 37, 39, 54, 23, 38, 40, 55, 24, 39, 41, 56, 25,
          40, 42, 57, 26, 41, 43, 58, 27, 42, 44, 59, 28, 43, 45, 60, 29, 44,
          46, 61, 30, 45, 47, 62, 31, 46, 63, 32, 49, 64, 33, 48, 50, 65, 34,
          49, 51, 66, 35, 50, 52, 67
        };

        ASSERT_EQ(naive.offsets, offsets);
        ASSERT_EQ(naive.indices, indices);
      } break;
      case 1: {
        std::vector<size_t> offsets = {
          0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 47, 50, 54, 58, 62, 66,
          70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 109, 112, 116, 120, 124,
          128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 171, 174, 178,
          182, 186, 190, 194, 198
        };
        std::vector<size_t> indices = {
          36, 51, 53, 68, 37, 52, 54, 69, 38, 53, 55, 70, 39, 54, 56, 71, 40,
          55, 57, 72, 41, 56, 58, 73, 42, 57, 59, 74, 43, 58, 60, 75, 44, 59,
          61, 76, 45, 60, 62, 77, 46, 61, 63, 78, 47, 62, 79, 48, 65, 80, 49,
          64, 66, 81, 50, 65, 67, 82, 51, 66, 68, 83, 52, 67, 69, 84, 53, 68,
          70, 85, 54, 69, 71, 86, 55, 70, 72, 87, 56, 71, 73, 88, 57, 72, 74,
          89, 58, 73, 75, 90, 59, 74, 76, 91, 60, 75, 77, 92, 61, 76, 78, 93,
          62, 77, 79, 94, 63, 78, 95, 64, 81, 96, 65, 80, 82, 97, 66, 81, 83,
          98, 67, 82, 84, 99, 68, 83, 85, 100, 69, 84, 86, 101, 70, 85, 87,
          102, 71, 86, 88, 103, 72, 87, 89, 104, 73, 88, 90, 105, 74, 89, 91,
          106, 75, 90, 92, 107, 76, 91, 93, 108, 77, 92, 94, 109, 78, 93, 95,
          110, 79, 94, 111, 80, 97, 112, 81, 96, 98, 113, 82, 97, 99, 114, 83,
          98, 100, 115, 84, 99, 101, 116, 85, 100, 102, 117, 86, 101, 103, 118
        };

        ASSERT_EQ(naive.offsets, offsets);
        ASSERT_EQ(naive.indices, indices);
      } break;
      case 2: {
        std::vector<size_t> offsets = {
          0, 4, 8, 12, 16, 20, 24, 28, 32, 35, 38, 42, 46, 50, 54, 58, 62, 66,
          70, 74, 78, 82, 86, 90, 94, 97, 100, 104, 108, 112, 116, 120, 124,
          128, 132, 136, 140, 144, 148, 152, 156, 159, 162, 166, 170, 174, 178,
          182, 186, 190, 194, 198
        };
        std::vector<size_t> indices = {
          87, 102, 104, 119, 88, 103, 105, 120, 89, 104, 106, 121, 90, 105,
          107, 122, 91, 106, 108, 123, 92, 107, 109, 124, 93, 108, 110, 125,
          94, 109, 111, 126, 95, 110, 127, 96, 113, 128, 97, 112, 114, 129, 98,
          113, 115, 130, 99, 114, 116, 131, 100, 115, 117, 132, 101, 116, 118,
          133, 102, 117, 119, 134, 103, 118, 120, 135, 104, 119, 121, 136, 105,
          120, 122, 137, 106, 121, 123, 138, 107, 122, 124, 139, 108, 123, 125,
          140, 109, 124, 126, 141, 110, 125, 127, 142, 111, 126, 143, 112, 129,
          144, 113, 128, 130, 145, 114, 129, 131, 146, 115, 130, 132, 147, 116,
          131, 133, 148, 117, 132, 134, 149, 118, 133, 135, 150, 119, 134, 136,
          151, 120, 135, 137, 152, 121, 136, 138, 153, 122, 137, 139, 154, 123,
          138, 140, 155, 124, 139, 141, 156, 125, 140, 142, 157, 126, 141, 143,
          158, 127, 142, 159, 128, 145, 160, 129, 144, 146, 161, 130, 145, 147,
          162, 131, 146, 148, 163, 132, 147, 149, 164, 133, 148, 150, 165, 134,
          149, 151, 166, 135, 150, 152, 167, 136, 151, 153, 168, 137, 152, 154,
          169
        };

        ASSERT_EQ(naive.offsets, offsets);
        ASSERT_EQ(naive.indices, indices);
      } break;
      case 3: {
        std::vector<size_t> offsets = {
          0, 4, 8, 12, 16, 20, 23, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66,
          70, 74, 78, 82, 85, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124,
          128, 132, 136, 140, 144, 147, 150, 154, 158, 162, 166, 170, 174, 178,
          182, 186, 190, 194, 198
        };
        std::vector<size_t> indices = {
          138, 153, 155, 170, 139, 154, 156, 171, 140, 155, 157, 172, 141, 156,
          158, 173, 142, 157, 159, 174, 143, 158, 175, 144, 161, 176, 145, 160,
          162, 177, 146, 161, 163, 178, 147, 162, 164, 179, 148, 163, 165, 180,
          149, 164, 166, 181, 150, 165, 167, 182, 151, 166, 168, 183, 152, 167,
          169, 184, 153, 168, 170, 185, 154, 169, 171, 186, 155, 170, 172, 187,
          156, 171, 173, 188, 157, 172, 174, 189, 158, 173, 175, 190, 159, 174,
          191, 160, 177, 192, 161, 176, 178, 193, 162, 177, 179, 194, 163, 178,
          180, 195, 164, 179, 181, 196, 165, 180, 182, 197, 166, 181, 183, 198,
          167, 182, 184, 199, 168, 183, 185, 200, 169, 184, 186, 201, 170, 185,
          187, 202, 171, 186, 188, 203, 172, 187, 189, 204, 173, 188, 190, 205,
          174, 189, 191, 206, 175, 190, 207, 176, 193, 208, 177, 192, 194, 209,
          178, 193, 195, 210, 179, 194, 196, 211, 180, 195, 197, 212, 181, 196,
          198, 213, 182, 197, 199, 214, 183, 198, 200, 215, 184, 199, 201, 216,
          185, 200, 202, 217, 186, 201, 203, 218, 187, 202, 204, 219, 188, 203,
          205, 220
        };

        ASSERT_EQ(naive.offsets, offsets);
        ASSERT_EQ(naive.indices, indices);
      } break;
      case 4: {
        std::vector<size_t> offsets = {
          0, 4, 8, 11, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66,
          70, 73, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124,
          128, 132, 135, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167,
          170, 173, 176, 179, 181
        };
        std::vector<size_t> indices = {
          189, 204, 206, 221, 190, 205, 207, 222, 191, 206, 223, 192, 209, 224,
          193, 208, 210, 225, 194, 209, 211, 226, 195, 210, 212, 227, 196, 211,
          213, 228, 197, 212, 214, 229, 198, 213, 215, 230, 199, 214, 216, 231,
          200, 215, 217, 232, 201, 216, 218, 233, 202, 217, 219, 234, 203, 218,
          220, 235, 204, 219, 221, 236, 205, 220, 222, 237, 206, 221, 223, 238,
          207, 222, 239, 208, 225, 240, 209, 224, 226, 241, 210, 225, 227, 242,
          211, 226, 228, 243, 212, 227, 229, 244, 213, 228, 230, 245, 214, 229,
          231, 246, 215, 230, 232, 247, 216, 231, 233, 248, 217, 232, 234, 249,
          218, 233, 235, 250, 219, 234, 236, 251, 220, 235, 237, 252, 221, 236,
          238, 253, 222, 237, 239, 254, 223, 238, 255, 224, 241, 225, 240, 242,
          226, 241, 243, 227, 242, 244, 228, 243, 245, 229, 244, 246, 230, 245,
          247, 231, 246, 248, 232, 247, 249, 233, 248, 250, 234, 249, 251, 235,
          250, 252, 236, 251, 253, 237, 252, 254, 238, 253, 255, 239, 254
        };

        ASSERT_EQ(naive.offsets, offsets);
        ASSERT_EQ(naive.indices, indices);
      } break;
    } // switch
    // clang-format on
  };
} // naive_coloring

int
parmetis_colorer() {
  UNIT("TASK") {
    using util::mpi::test;
    topo::unstructured_impl::simple_definition sd("simple2d-16x16.msh");

    const Color colors = 5;

    // Coloring with 5 colors with MPI_COMM_WORLD
    {
      auto [naive, e2v, v2e, e2e] = topo::unstructured_impl::make_dcrs(sd, 1);
      auto raw = util::parmetis::color(naive, colors);
      {
        std::stringstream ss;
        ss << "raw: " << std::endl;
        for(auto r : raw) {
          ss << r << " ";
        }
        ss << std::endl;
        flog_devel(info) << ss.str();
      } // scope

      auto [primaries, p2m, m2p] =
        topo::unstructured_impl::migrate(naive, colors, raw, e2v, v2e, e2e);

      // clang-format off
    switch(process()) {
      case 0: {
        std::vector<std::size_t> primaries_blessed = {
          0, 1, 2, 3, 4, 16, 17, 18, 19, 20, 32, 33, 34, 35, 36, 48, 49, 50,
          51, 52, 64, 65, 66, 67, 68, 80, 81, 82, 83, 84, 96, 97, 98, 99, 100,
          112, 113, 114, 115, 116, 128, 129, 130, 131, 132, 144, 145, 146, 147,
          148, 160, 161
        };
        std::map<std::size_t, std::size_t> m2p_blessed = {
          {0,0}, {1,1}, {2,2}, {3,3}, {4,4}, {16,5}, {17,6}, {18,7}, {19,8},
          {20,9}, {32,10}, {33,11}, {34,12}, {35,13}, {36,14}, {48,15},
          {49,16}, {50,17}, {51,18}, {52,19}, {64,20}, {65,21}, {66,22},
          {67,23}, {68,24}, {80,25}, {81,26}, {82,27}, {83,28}, {84,29},
          {96,30}, {97,31}, {98,32}, {99,33}, {100,34}, {112,35}, {113,36},
          {114,37}, {115,38}, {116,39}, {128,40}, {129,41}, {130,42}, {131,43},
          {132,44}, {144,45}, {145,46}, {146,47}, {147,48}, {148,49}, {160,50},
          {161,51}
        };

        ASSERT_EQ(p2m, primaries_blessed);
        ASSERT_EQ(m2p, m2p_blessed);
        ASSERT_EQ(primaries.at(0), primaries_blessed);
      } break;
      case 1: {
        std::vector<std::size_t> primaries_blessed = {
          10, 11, 12, 13, 14, 15, 26, 27, 28, 29, 30, 31, 42, 43, 44, 45, 46,
          47, 58, 59, 60, 61, 62, 63, 74, 75, 76, 77, 78, 79, 90, 91, 92, 93,
          94, 95, 106, 107, 108, 109, 110, 111, 122, 123, 124, 125, 126, 127,
          138, 139, 140, 141
        };
        std::map<std::size_t, std::size_t> m2p_blessed = {
          {10, 0}, {11, 1}, {12, 2}, {13, 3}, {14, 4}, {15, 5}, {26, 6},
          {27, 7}, {28, 8}, {29, 9}, {30, 10}, {31, 11}, {42, 12}, {43, 13},
          {44, 14}, {45, 15}, {46, 16}, {47, 17}, {58, 18}, {59, 19}, {60, 20},
          {61, 21}, {62, 22}, {63, 23}, {74, 24}, {75, 25}, {76, 26}, {77, 27},
          {78, 28}, {79, 29}, {90, 30}, {91, 31}, {92, 32}, {93, 33}, {94, 34},
          {95, 35}, {106, 36}, {107, 37}, {108, 38}, {109, 39}, {110, 40},
          {111, 41}, {122, 42}, {123, 43}, {124, 44}, {125, 45}, {126, 46},
          {127, 47}, {138, 48}, {139, 49}, {140, 50}, {141, 51}
        };

        ASSERT_EQ(p2m, primaries_blessed);
        ASSERT_EQ(m2p, m2p_blessed);
        ASSERT_EQ(primaries.at(1), primaries_blessed);
      } break;
      case 2: {
        std::vector<std::size_t> primaries_blessed = {
          5, 6, 7, 8, 9, 21, 22, 23, 24, 25, 37, 38, 39, 40, 41, 53, 54, 55,
          56, 57, 69, 70, 71, 72, 73, 85, 86, 87, 88, 89, 101, 102, 103, 104,
          105, 117, 118, 119, 120, 121, 133, 134, 135, 136, 137, 149, 150, 151,
          152, 153
        };
        std::map<std::size_t, std::size_t> m2p_blessed = {
          {5, 0}, {6, 1}, {7, 2}, {8, 3}, {9, 4}, {21, 5}, {22, 6}, {23, 7},
          {24, 8}, {25, 9}, {37, 10}, {38, 11}, {39, 12}, {40, 13}, {41, 14},
          {53, 15}, {54, 16}, {55, 17}, {56, 18}, {57, 19}, {69, 20}, {70, 21},
          {71, 22}, {72, 23}, {73, 24}, {85, 25}, {86, 26}, {87, 27}, {88, 28},
          {89, 29}, {101, 30}, {102, 31}, {103, 32}, {104, 33}, {105, 34},
          {117, 35}, {118, 36}, {119, 37}, {120, 38}, {121, 39}, {133, 40},
          {134, 41}, {135, 42}, {136, 43}, {137, 44}, {149, 45}, {150, 46},
          {151, 47}, {152, 48}, {153, 49}
        };

        ASSERT_EQ(p2m, primaries_blessed);
        ASSERT_EQ(m2p, m2p_blessed);
        ASSERT_EQ(primaries.at(2), primaries_blessed);
      } break;
      case 3: {
        std::vector<std::size_t> primaries_blessed = {
          142, 143, 154, 155, 156, 157, 158, 159, 169, 170, 171, 172, 173, 174,
          175, 185, 186, 187, 188, 189, 190, 191, 201, 202, 203, 204, 205, 206,
          207, 217, 218, 219, 220, 221, 222, 223, 233, 234, 235, 236, 237, 238,
          239, 249, 250, 251, 252, 253, 254, 255
        };
        std::map<std::size_t, std::size_t> m2p_blessed = {
          {142, 0}, {143, 1}, {154, 2}, {155, 3}, {156, 4}, {157, 5}, {158, 6},
          {159, 7}, {169, 8}, {170, 9}, {171, 10}, {172, 11}, {173, 12},
          {174, 13}, {175, 14}, {185, 15}, {186, 16}, {187, 17}, {188, 18},
          {189, 19}, {190, 20}, {191, 21}, {201, 22}, {202, 23}, {203, 24},
          {204, 25}, {205, 26}, {206, 27}, {207, 28}, {217, 29}, {218, 30},
          {219, 31}, {220, 32}, {221, 33}, {222, 34}, {223, 35}, {233, 36},
          {234, 37}, {235, 38}, {236, 39}, {237, 40}, {238, 41}, {239, 42},
          {249, 43}, {250, 44}, {251, 45}, {252, 46}, {253, 47}, {254, 48},
          {255, 49}
        };

        ASSERT_EQ(p2m, primaries_blessed);
        ASSERT_EQ(m2p, m2p_blessed);
        ASSERT_EQ(primaries.at(3), primaries_blessed);
      } break;
      case 4: {
        std::vector<std::size_t> primaries_blessed = {
          162, 163, 164, 165, 166, 167, 168, 176, 177, 178, 179, 180, 181, 182,
          183, 184, 192, 193, 194, 195, 196, 197, 198, 199, 200, 208, 209, 210,
          211, 212, 213, 214, 215, 216, 224, 225, 226, 227, 228, 229, 230, 231,
          232, 240, 241, 242, 243, 244, 245, 246, 247, 248
        };
        std::map<std::size_t, std::size_t> m2p_blessed = {
          {162, 0}, {163, 1}, {164, 2}, {165, 3}, {166, 4}, {167, 5}, {168, 6},
          {176, 7}, {177, 8}, {178, 9}, {179, 10}, {180, 11}, {181, 12},
          {182, 13}, {183, 14}, {184, 15}, {192, 16}, {193, 17}, {194, 18},
          {195, 19}, {196, 20}, {197, 21}, {198, 22}, {199, 23}, {200, 24},
          {208, 25}, {209, 26}, {210, 27}, {211, 28}, {212, 29}, {213, 30},
          {214, 31}, {215, 32}, {216, 33}, {224, 34}, {225, 35}, {226, 36},
          {227, 37}, {228, 38}, {229, 39}, {230, 40}, {231, 41}, {232, 42},
          {240, 43}, {241, 44}, {242, 45}, {243, 46}, {244, 47}, {245, 48},
          {246, 49}, {247, 50}, {248, 51}
        };

        ASSERT_EQ(p2m, primaries_blessed);
        ASSERT_EQ(m2p, m2p_blessed);
        ASSERT_EQ(primaries.at(4), primaries_blessed);
      } break;
    } // switch
        // clang-format on
    } // scope

    // Coloring with 5 colors with custom communicator with 2 processes
    {
      MPI_Comm group_comm;
      test(MPI_Comm_split(
        MPI_COMM_WORLD, process() < 2 ? 0 : MPI_UNDEFINED, 0, &group_comm));

      if(process() < 2) {
        auto [naive, e2v, v2e, e2e] =
          topo::unstructured_impl::make_dcrs(sd, 1, group_comm);
        auto raw = util::parmetis::color(naive, colors, group_comm);

        {
          std::stringstream ss;
          ss << "raw: " << std::endl;
          for(auto r : raw) {
            ss << r << " ";
          }
          ss << std::endl;
          flog_devel(info) << ss.str();
        } // scope

        auto [primaries, p2m, m2p] = topo::unstructured_impl::migrate(
          naive, colors, raw, e2v, v2e, e2e, group_comm);

        // clang-format off
        switch(process()) {
          case 0: {
            std::map<std::size_t, std::vector<std::size_t>>
              primaries_blessed = {
              {
                0,
                {
                  96, 97, 98, 112, 113, 114, 128, 129, 130, 144, 145, 146, 147,
                  148, 149, 160, 161, 162, 163, 164, 165, 176, 177, 178, 179,
                  180, 181, 192, 193, 194, 195, 196, 197, 208, 209, 210, 211,
                  212, 213, 224, 225, 226, 227, 228, 229, 240, 241, 242, 243,
                  244, 245
                }
              },
              {
                1,
                {
                  0, 1, 2, 3, 4, 5, 6, 16, 17, 18, 19, 20, 21, 22, 32, 33, 34,
                  35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 64, 65, 66, 67,
                  68, 69, 70, 80, 81, 82, 83, 84, 85, 86, 99, 100, 101, 102,
                  115, 116, 117, 131, 132, 133
                }
              },
              {
                2,
                {
                  7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29,
                  30, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58,
                  59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 87,
                  88, 89, 90, 91, 92, 93
                }
              }
            };
            std::vector<std::size_t> p2m_blessed = {
              0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
              19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
              35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
              51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
              67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
              83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100,
              101, 102, 112, 113, 114, 115, 116, 117, 128, 129, 130, 131, 132,
              133, 144, 145, 146, 147, 148, 149, 160, 161, 162, 163, 164, 165,
              176, 177, 178, 179, 180, 181, 192, 193, 194, 195, 196, 197, 208,
              209, 210, 211, 212, 213, 224, 225, 226, 227, 228, 229, 240, 241,
              242, 243, 244, 245
            };
            std::map<std::size_t, std::size_t> m2p_blessed = {
              {0, 0}, {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7},
              {8, 8}, {9, 9}, {10, 10}, {11, 11}, {12, 12}, {13, 13}, {14, 14},
              {15, 15}, {16, 16}, {17, 17}, {18, 18}, {19, 19}, {20, 20},
              {21, 21}, {22, 22}, {23, 23}, {24, 24}, {25, 25}, {26, 26},
              {27, 27}, {28, 28}, {29, 29}, {30, 30}, {31, 31}, {32, 32},
              {33, 33}, {34, 34}, {35, 35}, {36, 36}, {37, 37}, {38, 38},
              {39, 39}, {40, 40}, {41, 41}, {42, 42}, {43, 43}, {44, 44},
              {45, 45}, {46, 46}, {47, 47}, {48, 48}, {49, 49}, {50, 50},
              {51, 51}, {52, 52}, {53, 53}, {54, 54}, {55, 55}, {56, 56},
              {57, 57}, {58, 58}, {59, 59}, {60, 60}, {61, 61}, {62, 62},
              {63, 63}, {64, 64}, {65, 65}, {66, 66}, {67, 67}, {68, 68},
              {69, 69}, {70, 70}, {71, 71}, {72, 72}, {73, 73}, {74, 74},
              {75, 75}, {76, 76}, {77, 77}, {78, 78}, {79, 79}, {80, 80},
              {81, 81}, {82, 82}, {83, 83}, {84, 84}, {85, 85}, {86, 86},
              {87, 87}, {88, 88}, {89, 89}, {90, 90}, {91, 91}, {92, 92},
              {93, 93}, {96, 94}, {97, 95}, {98, 96}, {99, 97}, {100, 98},
              {101, 99}, {102, 100}, {112, 101}, {113, 102}, {114, 103},
              {115, 104}, {116, 105}, {117, 106}, {128, 107}, {129, 108},
              {130, 109}, {131, 110}, {132, 111}, {133, 112}, {144, 113},
              {145, 114}, {146, 115}, {147, 116}, {148, 117}, {149, 118},
              {160, 119}, {161, 120}, {162, 121}, {163, 122}, {164, 123},
              {165, 124}, {176, 125}, {177, 126}, {178, 127}, {179, 128},
              {180, 129}, {181, 130}, {192, 131}, {193, 132}, {194, 133},
              {195, 134}, {196, 135}, {197, 136}, {208, 137}, {209, 138},
              {210, 139}, {211, 140}, {212, 141}, {213, 142}, {224, 143},
              {225, 144}, {226, 145}, {227, 146}, {228, 147}, {229, 148},
              {240, 149}, {241, 150}, {242, 151}, {243, 152}, {244, 153},
              {245, 154}
            };

            ASSERT_EQ(primaries.at(0), primaries_blessed.at(0));
            ASSERT_EQ(primaries.at(1), primaries_blessed.at(1));
            ASSERT_EQ(primaries.at(2), primaries_blessed.at(2));
            ASSERT_EQ(p2m, p2m_blessed);
            ASSERT_EQ(m2p, m2p_blessed);
          } break;
          case 1: {
            std::map<std::size_t, std::vector<std::size_t>>
              primaries_blessed = {
              {
                3,
                {
                  94, 95, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118,
                  119, 120, 121, 122, 123, 124, 125, 126, 127, 134, 135, 136,
                  137, 138, 139, 140, 141, 142, 143, 150, 151, 152, 153, 154,
                  155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 171, 172,
                  173, 174, 175
                }
              },
              {
                4,
                {
                  182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 198, 199,
                  200, 201, 202, 203, 204, 205, 206, 207, 214, 215, 216, 217,
                  218, 219, 220, 221, 222, 223, 230, 231, 232, 233, 234, 235,
                  236, 237, 238, 239, 246, 247, 248, 249, 250, 251, 252, 253,
                  254, 255
                }
              }
            };
            std::vector<std::size_t> p2m_blessed = {
              94, 95, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119,
              120, 121, 122, 123, 124, 125, 126, 127, 134, 135, 136, 137, 138,
              139, 140, 141, 142, 143, 150, 151, 152, 153, 154, 155, 156, 157,
              158, 159, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 182,
              183, 184, 185, 186, 187, 188, 189, 190, 191, 198, 199, 200, 201,
              202, 203, 204, 205, 206, 207, 214, 215, 216, 217, 218, 219, 220,
              221, 222, 223, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
              246, 247, 248, 249, 250, 251, 252, 253, 254, 255
            };
            std::map<std::size_t, std::size_t> m2p_blessed = {
              {94, 0}, {95, 1}, {103, 2}, {104, 3}, {105, 4}, {106, 5},
              {107, 6}, {108, 7}, {109, 8}, {110, 9}, {111, 10}, {118, 11},
              {119, 12}, {120, 13}, {121, 14}, {122, 15}, {123, 16}, {124, 17},
              {125, 18}, {126, 19}, {127, 20}, {134, 21}, {135, 22}, {136, 23},
              {137, 24}, {138, 25}, {139, 26}, {140, 27}, {141, 28}, {142, 29},
              {143, 30}, {150, 31}, {151, 32}, {152, 33}, {153, 34}, {154, 35},
              {155, 36}, {156, 37}, {157, 38}, {158, 39}, {159, 40}, {166, 41},
              {167, 42}, {168, 43}, {169, 44}, {170, 45}, {171, 46}, {172, 47},
              {173, 48}, {174, 49}, {175, 50}, {182, 51}, {183, 52}, {184, 53},
              {185, 54}, {186, 55}, {187, 56}, {188, 57}, {189, 58}, {190, 59},
              {191, 60}, {198, 61}, {199, 62}, {200, 63}, {201, 64}, {202, 65},
              {203, 66}, {204, 67}, {205, 68}, {206, 69}, {207, 70}, {214, 71},
              {215, 72}, {216, 73}, {217, 74}, {218, 75}, {219, 76}, {220, 77},
              {221, 78}, {222, 79}, {223, 80}, {230, 81}, {231, 82}, {232, 83},
              {233, 84}, {234, 85}, {235, 86}, {236, 87}, {237, 88}, {238, 89},
              {239, 90}, {246, 91}, {247, 92}, {248, 93}, {249, 94}, {250, 95},
              {251, 96}, {252, 97}, {253, 98}, {254, 99}, {255, 100}
            };

            ASSERT_EQ(primaries.at(3), primaries_blessed.at(3));
            ASSERT_EQ(primaries.at(4), primaries_blessed.at(4));
            ASSERT_EQ(p2m, p2m_blessed);
            ASSERT_EQ(m2p, m2p_blessed);
          } break;
        } // switch
        // clang-format on

        test(MPI_Comm_free(&group_comm));
      } // if
    } // scope
  };
} // parmetis_colorer

int
coloring_driver() {
  UNIT() {
    ASSERT_EQ((test<naive_coloring, mpi>()), 0);
    ASSERT_EQ((test<parmetis_colorer, mpi>()), 0);
  };
} // simple2d_8x8

flecsi::unit::driver<coloring_driver> driver;
